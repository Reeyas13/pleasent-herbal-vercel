generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
  GUEST
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum paymentStatus {
  SUCCESS
  FAILURE
  
}


model User {
  id          Int           @id @default(autoincrement())
  name        String
  email       String        @unique
  password    String
  role        Role          @default(USER)
  phone       String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  addresses   UserAddress[]
  payments    UserPayment[]
  orders      Order[]
  cart        Cart[]
  payment     Payment[]
  VerificationCode  String?   @default("")
  Attempt       Int           @default(0)
  locked        Boolean       @default(false)
  isVerified    Boolean       @default(false)
  lockedAt      DateTime? 
}

model UserAddress {
  id           Int      @id @default(autoincrement())
  userId       Int
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  addressLine1 String
  addressLine2 String?
  city_id         Int
  City      City   @relation(fields: [city_id],references: [id])
  state        String
  // country      String
  // postalCode   String
  phone        String
  createdAt    DateTime @default(now())
}

model UserPayment {
  id          Int     @id @default(autoincrement())
  userId      Int
  user        User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  paymentType String  
  provider    String  
  accountNo   String
  expiryDate  DateTime
  createdAt   DateTime @default(now())
}

model Product {
  id           Int            @id @default(autoincrement())
  name         String
  description  String
  price        Float
  stock        Int
  imageUrls    Json
  slug         String         @unique
  createdAt    DateTime       @default(now())
  featured     Boolean      @default(false)
  updatedAt    DateTime       @updatedAt
  category_Id  Int
  categories   Category    @relation(fields: [category_Id],references: [id])
  orders       Order[]
  cart        Cart[]
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  slug        String    @unique
  products    Product[] 

}

model Order {
  id          Int             @id @default(autoincrement())
  userId      Int
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  total       Float
  status      OrderStatus     @default(PENDING)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  productId   Int     
  quantity    Int
  products    Product?        @relation(fields: [productId], references: [id])
  shipping_id Int
  payment_id  Int
  shipping    OrderShipping @relation(fields: [shipping_id],references: [id])
  payments    OrderPayment  @relation(fields: [payment_id],references: [id])
  payment     Payment[]
}

model OrderShipping {
  id          Int       @id @default(autoincrement())
 
  order       Order[]
  address     String
  city_id     Int
  city        City    @relation(fields: [city_id],references: [id])
  state       String
  shippingFee Float
  estimatedDelivery DateTime
  createdAt   DateTime @default(now())
}


model OrderPayment {
  id          Int       @id @default(autoincrement())
  order       Order[]
  paymentType String?    
  provider    String?    
  accountNo   String?
  amountPaid  Float?
  paidAt      DateTime?
  createdAt   DateTime   @default(now())
}
model Cart{
  id Int  @id @default(autoincrement())
  userId Int
  productId Int
  quantity Int
  user  User  @relation(fields: [userId],references: [id])
  product Product @relation(fields: [productId],references: [id])
}

model Payment{
  id String @id @default(uuid())
  userId Int
  orderId Int
  amount Int
  signature String?
  transaction_code String?
  typeOfPayment   String         @default("ESEWA")
  status  paymentStatus? @default(FAILURE)
  user   User @relation(fields: [userId],references: [id])
  order   Order @relation(fields: [orderId],references: [id])
}


model City{
  id Int @id @default(autoincrement())
  name String
  shippingFees Int
  orderShipping OrderShipping[]
  userAddress   UserAddress[]
}